{"version":3,"sources":["components/Profile/Profile.module.css","components/CoinTable/CoinTable.module.css","assets/images/IMG1.JPG","components/Header/Header.js","components/CoinTable/CoinTable.js","store/actions/tickers.js","store/actions/actionTypes.js","components/Profile/Profile.js","App.js","store/reducers/cryptoReducer.js","store/reducers/index.js","serviceWorker.js","index.js"],"names":["module","exports","withRouter","props","useState","isLoggedIn","setIsLoggedIn","useEffect","localStorage","getItem","Navbar","bg","variant","Brand","href","Nav","className","Link","Form","inline","Button","onClick","removeItem","history","push","setItem","JSON","parse","connect","state","data","dispatch","onGetData","val","getData","ws","WebSocket","msg","stringify","event","channel","pair","type","onmessage","res","result","resData","response","connectionSuccessBTCEUR","connectionSuccessETHUSD","connectionSuccessETHEUR","connectionSuccessEOSUSD","onopen","send","onerror","err","error","onclose","actions","forEach","btcusd","BTCUSD","length","btceur","etheur","ETHEUR","ethusd","ETHUSD","eosusd","EOSUSD","table","BTCEUR","map","ind","key","style","textAlign","toFixed","Spinner","animation","Table","striped","bordered","hover","classes","CoinTable","Profile","toggle","setToggle","to","Card","width","Img","src","IMG","Body","Title","Text","ProfileText","target","App","path","exact","component","initialState","reducer","action","combineReducers","cryptoReducer","Boolean","window","location","hostname","match","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f96a5fd1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Profile\":\"Profile_Profile__3HF8E\",\"ProfileText\":\"Profile_ProfileText__hu28D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CoinTable\":\"CoinTable_CoinTable__2eDW7\"};","module.exports = __webpack_public_path__ + \"static/media/IMG1.83b41f77.JPG\";","import React, { useState, useEffect } from 'react'\nimport { Navbar, Form, Nav, Button } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\n\nconst Header = (props) => {\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n\n    useEffect(() => {\n        setIsLoggedIn(localStorage.getItem('auth'))\n    }, [])\n\n\n    let logInHandler = () => {\n        setIsLoggedIn(true)\n        localStorage.setItem('auth', JSON.parse(\"true\"))\n    }\n\n    let logOutHandler = () => {\n        setIsLoggedIn(false)\n        localStorage.removeItem('auth')\n        props.history.push('/')\n    }\n\n    return (\n        <>\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"/\">Crypto</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/\">Home</Nav.Link>\n            {isLoggedIn && <Nav.Link href=\"/profile\">Profile</Nav.Link>}\n            </Nav>\n            <Form inline>\n            {!isLoggedIn ? <Button onClick={logInHandler} variant=\"primary\">Login</Button> : <Button onClick={logOutHandler} variant=\"primary\">Logout</Button>}\n            </Form>\n        </Navbar>\n        </>\n    )\n}\n\nexport default withRouter(Header)","import React, { useEffect } from 'react'\nimport { Table } from 'react-bootstrap'\nimport classes from './CoinTable.module.css'\nimport Header from '../Header/Header'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions/index'\nimport Spinner from 'react-bootstrap/Spinner'\n\nconst CoinTable = (props) => {\n    \n    let pair = ['BTCUSD', 'BTCEUR', 'ETHUSD', 'ETHEUR', 'EOSUSD']\n    \n    useEffect(() => {\n        pair.forEach((val) => {\n           return props.onGetData((val))\n        })\n         \n    }, [])\n\n    let btcusd = props.data.BTCUSD.length\n    let btceur = props.data.BTCUSD.length\n    let etheur = props.data.ETHEUR.length\n    let ethusd = props.data.ETHUSD.length\n    let eosusd = props.data.EOSUSD.length\n\n    let table = null;\n    \n    if(btcusd > 0 && btceur > 0 && etheur > 0 && ethusd > 0 && eosusd > 0){\n        let BTCUSD = [props.data.BTCUSD[0], ...props.data.BTCUSD[1]]\n        let BTCEUR = [props.data.BTCEUR[0], ...props.data.BTCEUR[1]]\n        let ETHEUR = [props.data.ETHEUR[0], ...props.data.ETHEUR[1]]\n        let ETHUSD = [props.data.ETHUSD[0], ...props.data.ETHUSD[1]]\n        let EOSUSD = [props.data.EOSUSD[0], ...props.data.EOSUSD[1]]\n\n        let dataInfo2 = [BTCUSD, BTCEUR, ETHEUR, ETHUSD, EOSUSD]\n         table = dataInfo2.map((val, ind) => {\n            return (    \n                    <tbody key={ind}>\n                        <tr>\n                            <td style={{textAlign: 'center'}}>{ind + 1}</td>\n                            <td>{val[0]}</td>\n                            <td>{`${val[1]} %`}</td>\n                            <td>{val[2]}</td>\n                            <td>{(val[3]).toFixed(1)}</td>\n                        </tr>\n                    </tbody>\n            )\n        })\n    }else{\n        table = <tbody style={{textAlign: 'center'}}><tr><td><Spinner animation=\"border\"/></td></tr></tbody>\n    }\n\n    \n\n    return (\n        <>\n        <Header />\n        <Table striped bordered hover variant=\"dark\" className={classes.CoinTable}>\n            <thead>\n                <tr>\n                <th style={{textAlign: 'center'}}>#</th>\n                <th>Symbol</th>\n                <th>Daily change</th>\n                <th>Volume</th>\n                <th>Last price</th>\n                </tr>\n            </thead>\n            {table}\n        </Table>\n        </>\n    )\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        data: state.data\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        onGetData: (val) => dispatch(actions.getData(val))\n    } \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CoinTable)","import * as actionTypes from './actionTypes'\n\n\nexport const connectionStart = () => {\n    return {\n        type: actionTypes.CONNECTION_START\n    }\n}\n\nexport const connectionFail = (error) => {\n    return {\n        type: actionTypes.CONNECTION_FAIL,\n        error: error\n    }\n}\n\nexport const connectionSuccessBTCUSD = (response) => {\n    return {\n        type: actionTypes.CONNECTION_SUCCESS_BTCUSD,\n        response: response\n    }\n}\n\nexport const connectionSuccessBTCEUR = (response) => {\n    return {\n        type: actionTypes.CONNECTION_SUCCESS_BTCEUR,\n        response: response\n    }\n}\n\nexport const connectionSuccessETHUSD = (response) => {\n    return {\n        type: actionTypes.CONNECTION_SUCCESS_ETHUSD,\n        response: response\n    }\n}\n\nexport const connectionSuccessETHEUR = (response) => {\n    return {\n        type: actionTypes.CONNECTION_SUCCESS_ETHEUR,\n        response: response\n    }\n}\n\nexport const connectionSuccessEOSUSD = (response) => {\n    return {\n        type: actionTypes.CONNECTION_SUCCESS_EOSUSD,\n        response: response\n    }\n}\n\n\nexport const getData = (val) => {\n    const ws = new WebSocket('wss://api-pub.bitfinex.com/ws/2')\n    let msg = JSON.stringify({ \n        event: \"subscribe\", \n        channel: \"ticker\", \n        pair: val\n      })\n    return dispatch => {\n        dispatch(connectionStart())\n        ws.onmessage = (res) => {\n            if((JSON.parse(res.data).event) !== 'subscribed' && (JSON.parse(res.data).event) !== 'info'){\n                let result = JSON.parse(res.data)[1]\n                if(result !== 'hb'){\n                    let resData = [val,[result[5], result[7], result[6]]]\n                    switch(val){\n                        case 'BTCUSD':\n                            dispatch(connectionSuccessBTCUSD(resData))\n                            break;\n                        case 'BTCEUR':\n                            dispatch(connectionSuccessBTCEUR(resData))\n                            break;\n                        case 'ETHUSD':\n                            dispatch(connectionSuccessETHUSD(resData))\n                            break;\n                        case 'ETHEUR':\n                            dispatch(connectionSuccessETHEUR(resData))\n                            break;\n                        case 'EOSUSD':\n                            dispatch(connectionSuccessEOSUSD(resData))\n                            break;\n                            default: {\n                                return null\n                            }\n                        }\n                    }\n                }\n        }\n        ws.onopen = () => {\n            ws.send(msg)\n        }\n        ws.onerror = (err) => {\n            dispatch(connectionFail(err))\n        }\n        ws.onclose = () => {\n            getData()\n        }\n    }\n}","export const CONNECTION_START = 'CONNECTION_FAIL'\nexport const CONNECTION_FAIL = 'CONNECTION_FAIL'\nexport const CONNECTION_SUCCESS_BTCUSD = 'CONNECTION_SUCCESS_BTCUSD'\nexport const CONNECTION_SUCCESS_BTCEUR = 'CONNECTION_SUCCESS_BTCEUR'\nexport const CONNECTION_SUCCESS_ETHUSD = 'CONNECTION_SUCCESS_ETHUSD'\nexport const CONNECTION_SUCCESS_ETHEUR = 'CONNECTION_SUCCESS_ETHEUR'\nexport const CONNECTION_SUCCESS_EOSUSD = 'CONNECTION_SUCCESS_EOSUSD'\n","import React, { useState } from 'react'\nimport Header from '../Header/Header'\nimport { Card, Button } from 'react-bootstrap'\nimport classes from './Profile.module.css'\nimport IMG from '../../assets/images/IMG1.JPG'\nimport { Redirect } from 'react-router-dom'\n\n\nexport const Profile = () => {\n\n    const [toggle, setToggle] = useState(false)\n\n    \n    if(!localStorage.getItem('auth')){\n        return <Redirect to='/' />\n    }\n\n    const URL = 'https://api.adorable.io/avatars/285/nikolamiljkovic91@gmail.com'\n\n    let toggleImage = () => {\n        setToggle(!toggle)\n    }\n\n    return (\n        <>\n            <Header />\n            <Card className={classes.Profile} style={{ width: '18rem' }}>\n            <Card.Img variant=\"top\" src={toggle ? URL : IMG} />\n            <Card.Body className='p-0'>\n                <Card.Title>Nikola Miljkovic</Card.Title>\n                <Card.Text className={classes.ProfileText}>\n                <Card.Link className='text-muted ml-0' href='mailto:nikolamiljkovic91@gmail.com'>nikolamiljkovic91@gmail.com</Card.Link>\n                <Card.Link className='text-muted ml-0 mb-3' href='https://github.com/nikolamiljkovic91' target='_blank'>https://github.com/nikolamiljkovic91</Card.Link>\n                </Card.Text>\n                <Button onClick={toggleImage} variant=\"primary\">Toggle avatar</Button>\n            </Card.Body>\n            </Card>\n        </>\n    )\n}\n","import React from 'react';\nimport CoinTable from './components/CoinTable/CoinTable';\nimport { Profile } from './components/Profile/Profile';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\n\nlet App = () => {\n\n  return (\n    <>\n    <HashRouter>\n      <Switch>\n        <Route path = '/' exact component = {CoinTable} />\n        <Route path = '/profile' component = {Profile} />\n      </Switch>\n    </HashRouter>\n    </>\n  );\n}\n\nexport default App;\n","import * as actionTypes from '../actions/actionTypes'\n\nconst initialState = {\n    BTCUSD: {},\n    BTCEUR: {},\n    ETHEUR: {},\n    ETHUSD: {},\n    EOSUSD: {},\n}\n\nconst reducer = (state = initialState, action) => {\n    switch(action.type){\n        case actionTypes.CONNECTION_START:\n            return{\n                ...state,\n            }\n        case actionTypes.CONNECTION_FAIL:\n            return{\n                ...state,\n            }\n        case actionTypes.CONNECTION_SUCCESS_BTCUSD:\n            return{\n                ...state,\n                BTCUSD: action.response,\n            }\n        case actionTypes.CONNECTION_SUCCESS_BTCEUR:\n            return{\n                ...state,\n                BTCEUR: action.response,\n            }\n            case actionTypes.CONNECTION_SUCCESS_ETHUSD:\n            return{\n                ...state,\n                ETHUSD: action.response,\n            }\n            case actionTypes.CONNECTION_SUCCESS_ETHEUR:\n            return{\n                ...state,\n                ETHEUR: action.response,\n            }\n            case actionTypes.CONNECTION_SUCCESS_EOSUSD:\n            return{\n                ...state,\n                EOSUSD: action.response,\n            }\n            default:\n                return state\n    }\n}\n\nexport default reducer","import { combineReducers } from 'redux';\nimport cryptoReducer from './cryptoReducer';\n\nexport default combineReducers({\n  data: cryptoReducer\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport reducers from './store/reducers'\nimport * as serviceWorker from './serviceWorker';\n\n\nconst store = createStore(reducers, (applyMiddleware(thunk)))\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}